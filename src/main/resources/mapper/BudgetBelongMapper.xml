<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hbhb.cw.budget.mapper.BudgetBelongMapper">
  <resultMap id="BaseResultMap" type="com.hbhb.cw.budget.model.BudgetBelong">
    <id column="id" jdbcType="BIGINT" property="id"/>
    <result column="budget_id" jdbcType="BIGINT" property="budgetId"/>
    <result column="unit_id" jdbcType="INTEGER" property="unitId"/>
    <result column="under_unit_id" jdbcType="INTEGER" property="underUnitId"/>
    <result column="budget_num" jdbcType="VARCHAR" property="budgetNum"/>
  </resultMap>
  <sql id="Base_Column_List">
    id, budget_id, unit_id, under_unit_id, budget_num
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from budget_belong
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from budget_belong
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.hbhb.cw.budget.model.BudgetBelong">
    insert into budget_belong (id, budget_id, unit_id, 
      under_unit_id, budget_num)
    values (#{id,jdbcType=BIGINT}, #{budgetId,jdbcType=BIGINT}, #{unitId,jdbcType=INTEGER}, 
      #{underUnitId,jdbcType=INTEGER}, #{budgetNum,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hbhb.cw.budget.model.BudgetBelong">
    insert into budget_belong
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="budgetId != null">
        budget_id,
      </if>
      <if test="unitId != null">
        unit_id,
      </if>
      <if test="underUnitId != null">
        under_unit_id,
      </if>
      <if test="budgetNum != null">
        budget_num,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="budgetId != null">
        #{budgetId,jdbcType=BIGINT},
      </if>
      <if test="unitId != null">
        #{unitId,jdbcType=INTEGER},
      </if>
      <if test="underUnitId != null">
        #{underUnitId,jdbcType=INTEGER},
      </if>
      <if test="budgetNum != null">
        #{budgetNum,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hbhb.cw.budget.model.BudgetBelong">
    update budget_belong
    <set>
      <if test="budgetId != null">
        budget_id = #{budgetId,jdbcType=BIGINT},
      </if>
      <if test="unitId != null">
        unit_id = #{unitId,jdbcType=INTEGER},
      </if>
      <if test="underUnitId != null">
        under_unit_id = #{underUnitId,jdbcType=INTEGER},
      </if>
      <if test="budgetNum != null">
        budget_num = #{budgetNum,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hbhb.cw.budget.model.BudgetBelong">
    update budget_belong
    set budget_id = #{budgetId,jdbcType=BIGINT},
      unit_id = #{unitId,jdbcType=INTEGER},
      under_unit_id = #{underUnitId,jdbcType=INTEGER},
      budget_num = #{budgetNum,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <delete id="deleteBatch" parameterType="list">
    delete from budget_belong
    where id in
    <foreach collection="list" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </delete>

  <select id="selectIdByUnderUnitId" parameterType="map" resultType="long">
    select bb.id
    from budget_belong bb
    where bb.budget_id = #{budgetId}
    and bb.under_unit_id = #{underUnitId}
  </select>

  <select id="selectUnitIdByUnderUnitId" parameterType="map" resultType="integer">
    select bb.unit_id
    from budget_belong bb
    where bb.budget_id = #{budgetId}
    and bb.under_unit_id = #{underUnitId}
  </select>

  <insert id="insertBatch" parameterType="java.util.List">
    insert into budget_belong (budget_id,unit_id,under_unit_id)
    values
    <foreach item="item" index="index" collection="list" separator=",">
      (#{item.budgetId},#{item.unitId},#{item.underUnitId})
    </foreach>
    ON DUPLICATE KEY UPDATE under_unit_id = VALUES(under_unit_id)
  </insert>

  <delete id="deleteByBudgetId" parameterType="list">
    delete from budget_belong
    where budget_id = #{budgetId}
  </delete>

  <delete id="deleteBatchByBudgetId" parameterType="list">
    delete from budget_belong
    where budget_id in
    <foreach collection="list" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </delete>

  <select id="selectUnderUnitId" resultType="java.lang.Integer">
    select under_unit_id from budget_belong
    <where>
    <if test="budgetId != null ">
     and  budget_id=#{budgetId}
    </if>
    <if test="unitId != null">
     and  unit_id=#{unitId}
    </if>
    </where>
  </select>

  <select id="selectUnderUnitIdByNum" resultType="java.lang.Integer">
    select under_unit_id from budget_belong
    <where>
      <if test="budgetNum != null ">
        and  budget_num=#{budgetNum}
      </if>
      <if test="unitId != null">
        and  unit_id=#{unitId}
      </if>
    </where>
  </select>

  <select id="selectAll"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from budget_belong
  </select>

  <update id="batchUpdate" parameterType="list">
    update budget_belong
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="budget_id=case" suffix="end,">
        <foreach collection="list" item="i" index="index">
          <if test="i.budgetId!=null">
            when id=#{i.id} then #{i.budgetId}
          </if>
        </foreach>
      </trim>
      <trim prefix="unit_id=case" suffix="end,">
        <foreach collection="list" item="i" index="index">
          <if test="i.unitId!=null">
            when id=#{i.id} then #{i.unitId}
          </if>
        </foreach>
      </trim>
      <trim prefix="under_unit_id=case" suffix="end,">
        <foreach collection="list" item="i" index="index">
          <if test="i.underUnitId!=null">
            when id=#{i.id} then #{i.underUnitId}
          </if>
        </foreach>
      </trim>
      <trim prefix="budget_num=case" suffix="end,">
        <foreach collection="list" item="i" index="index">
          <if test="i.budgetNum!=null">
            when id=#{i.id} then #{i.budgetNum}
          </if>
        </foreach>
      </trim>
    </trim>
    where
    <foreach collection="list" separator="or" item="i" index="index">
      id=#{i.id}
    </foreach>
  </update>
</mapper>