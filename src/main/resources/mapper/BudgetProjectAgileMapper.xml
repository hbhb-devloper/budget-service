<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hbhb.cw.budget.mapper.BudgetProjectAgileMapper">
    <resultMap id="BaseResultMap" type="com.hbhb.cw.budget.model.BudgetProjectAgile">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="project_num" jdbcType="VARCHAR" property="projectNum"/>
        <result column="project_name" jdbcType="VARCHAR" property="projectName"/>
        <result column="unit_id" jdbcType="INTEGER" property="unitId"/>
        <result column="budget_id" jdbcType="BIGINT" property="budgetId"/>
        <result column="cost" jdbcType="DECIMAL" property="cost"/>
        <result column="vat_rate" jdbcType="DECIMAL" property="vatRate"/>
        <result column="tax_include_amount" jdbcType="DECIMAL" property="taxIncludeAmount"/>
        <result column="create_by" jdbcType="VARCHAR" property="createBy"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
  </resultMap>
  <sql id="Base_Column_List">
    id, project_num, project_name, unit_id, budget_id, cost, vat_rate, tax_include_amount, 
    create_by, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from budget_project_agile
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from budget_project_agile
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.hbhb.cw.budget.model.BudgetProjectAgile">
    insert into budget_project_agile (id, project_num, project_name, 
      unit_id, budget_id, cost, 
      vat_rate, tax_include_amount, create_by, 
      create_time)
    values (#{id,jdbcType=BIGINT}, #{projectNum,jdbcType=VARCHAR}, #{projectName,jdbcType=VARCHAR}, 
      #{unitId,jdbcType=INTEGER}, #{budgetId,jdbcType=BIGINT}, #{cost,jdbcType=DECIMAL}, 
      #{vatRate,jdbcType=DECIMAL}, #{taxIncludeAmount,jdbcType=DECIMAL}, #{createBy,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" parameterType="com.hbhb.cw.budget.model.BudgetProjectAgile" useGeneratedKeys="true"
            keyProperty="id">
        insert into budget_project_agile
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="projectNum != null">
                project_num,
            </if>
            <if test="projectName != null">
                project_name,
      </if>
      <if test="unitId != null">
        unit_id,
      </if>
      <if test="budgetId != null">
        budget_id,
      </if>
      <if test="cost != null">
        cost,
      </if>
      <if test="vatRate != null">
        vat_rate,
      </if>
      <if test="taxIncludeAmount != null">
        tax_include_amount,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="projectNum != null">
        #{projectNum,jdbcType=VARCHAR},
      </if>
      <if test="projectName != null">
        #{projectName,jdbcType=VARCHAR},
      </if>
      <if test="unitId != null">
        #{unitId,jdbcType=INTEGER},
      </if>
      <if test="budgetId != null">
        #{budgetId,jdbcType=BIGINT},
      </if>
      <if test="cost != null">
        #{cost,jdbcType=DECIMAL},
      </if>
      <if test="vatRate != null">
        #{vatRate,jdbcType=DECIMAL},
      </if>
      <if test="taxIncludeAmount != null">
        #{taxIncludeAmount,jdbcType=DECIMAL},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.hbhb.cw.budget.model.BudgetProjectAgile">
        update budget_project_agile
        <set>
            <if test="projectNum != null">
                project_num = #{projectNum,jdbcType=VARCHAR},
            </if>
            <if test="projectName != null">
                project_name = #{projectName,jdbcType=VARCHAR},
            </if>
            <if test="unitId != null">
                unit_id = #{unitId,jdbcType=INTEGER},
      </if>
      <if test="budgetId != null">
        budget_id = #{budgetId,jdbcType=BIGINT},
      </if>
      <if test="cost != null">
        cost = #{cost,jdbcType=DECIMAL},
      </if>
      <if test="vatRate != null">
        vat_rate = #{vatRate,jdbcType=DECIMAL},
      </if>
      <if test="taxIncludeAmount != null">
        tax_include_amount = #{taxIncludeAmount,jdbcType=DECIMAL},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
    <update id="updateByPrimaryKey" parameterType="com.hbhb.cw.budget.model.BudgetProjectAgile">
    update budget_project_agile
    set project_num = #{projectNum,jdbcType=VARCHAR},
      project_name = #{projectName,jdbcType=VARCHAR},
      unit_id = #{unitId,jdbcType=INTEGER},
      budget_id = #{budgetId,jdbcType=BIGINT},
      cost = #{cost,jdbcType=DECIMAL},
      vat_rate = #{vatRate,jdbcType=DECIMAL},
      tax_include_amount = #{taxIncludeAmount,jdbcType=DECIMAL},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <select id="selectAgileList" parameterType="map" resultType="com.hbhb.cw.budget.web.vo.BudgetProjectAgileVO">
        select
        bpa.id as id,
        bpa.project_num as projectNum,
        bpa.project_name as projectName,
        u.unit_name as unitName,
        b.project_item as budgetName,
        bpa.cost as cost,
        bpa.vat_rate as vatRate,
        bpa.tax_include_amount as taxIncludeAmount,
        bpa.create_by as createBy
    from budget_project_agile bpa
    left join unit u on bpa.unit_id = u.id
    left join budget b on bpa.budget_id = b.id
      where  delete_flag = 1
      <if test="cond.unitId != null  and cond.unitId != ''">
       and bpa.unit_id = #{cond.unitId}
      </if>
      <if test="cond.date != null  and cond.date != ''">
        and bpa.create_time like concat(#{cond.date}, '%')
      </if>
    <if test="cond.budgetType != null  and cond.budgetType != ''">
      and b.budget_num = #{cond.budgetType}
    </if>
      <if test="cond.projectNum != null  and cond.projectNum != ''">
        and bpa.project_num like concat('%', #{cond.projectNum}, '%')
      </if>
      <if test="cond.cost != null  and cond.cost != ''">
        and bpa.cost = #{cond.cost}
      </if>
    order by bpa.create_time desc
  </select>

  <select id="countAgileList" parameterType="map" resultType="int">
    select COUNT(1)
    from budget_project_agile bpa
    left join unit u on bpa.unit_id = u.id
    left join budget b on bpa.budget_id = b.id
    where  delete_flag = 1
    <if test="cond.unitId != null  and cond.unitId != ''">
      and bpa.unit_id = #{cond.unitId}
    </if>
    <if test="cond.date != null  and cond.date != ''">
      and bpa.create_time like concat(#{cond.date}, '%')
    </if>
    <if test="cond.budgetType != null  and cond.budgetType != ''">
      and b.budget_num = #{cond.budgetType}
    </if>
    <if test="cond.projectNum != null  and cond.projectNum != ''">
      and bpa.project_num like concat('%', #{cond.projectNum}, '%')
    </if>
    <if test="cond.cost != null  and cond.cost != ''">
      and bpa.cost = #{cond.cost};
    </if>
  </select>

    <select id="selectParentAgileList" parameterType="map" resultType="com.hbhb.cw.budget.web.vo.BudgetProjectAgileVO">
        select
        bpa.id as id,
        bpa.project_num as projectNum,
        bpa.project_name as projectName,
        u.unit_name as unitName,
        b.project_item as budgetName,
        bpa.cost as cost,
        bpa.vat_rate as vatRate,
        bpa.tax_include_amount as taxIncludeAmount,
        bpa.create_by as createBy
    from budget_project_agile bpa
    left join unit u on bpa.unit_id = u.id
    left join budget b on bpa.budget_id = b.id
    where bpa.unit_id in
    <foreach collection="list" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
    and b.import_date = #{cond.importDate}
    and delete_flag = 1
    <if test="cond.createTime != null  and cond.createTime != ''">
      and bpa.create_time like concat(#{cond.date}, '%')
    </if>
    <if test="cond.budgetType != null  and cond.budgetType != ''">
      and b.budget_num = #{cond.budgetType}
    </if>
    <if test="cond.projectNum != null  and cond.projectNum != ''">
      and bpa.project_num like concat('%',#{cond.projectNum}, '%')
    </if>
    <if test="cond.cost != null  and cond.cost != ''">
      and bpa.cost = #{cond.cost};
    </if>
    order by bp.create_time desc
  </select>

  <select id="countParentAgileList" parameterType="map" resultType="int">
    select COUNT(1)
    from budget_project_agile bpa
    left join unit u on bpa.unit_id = u.id
    left join budget b on bpa.budget_id = b.id
    where bpa.unit_id in
    <foreach collection="list" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
    and b.import_date = #{cond.importDate}
    and delete_flag = 1
    <if test="cond.createTime != null  and cond.createTime != ''">
      and bpa.create_time like concat(#{cond.date}, '%')
    </if>
    <if test="cond.budgetType != null  and cond.budgetType != ''">
      and b.budget_num = #{cond.budgetType}
    </if>
    <if test="cond.projectNum != null  and cond.projectNum != ''">
      and bpa.project_num like concat('%',#{cond.projectNum}, '%')
    </if>
    <if test="cond.cost != null  and cond.cost != ''">
      and bpa.cost = #{cond.cost};
    </if>
  </select>

  <select id="selectTypeCountByBudgetId" resultType="java.lang.Integer">
    select max(right(project_num, 4))
    from budget_project_agile
    where
    year(create_time) = #{createTime}
    and delete_flag = 1
    <if test="budgetId != null">
      and  budget_id = #{budgetId}
    </if>
    <if test="unitId != null">
      and unit_id = #{unitId}
    </if>
  </select>

    <resultMap id="projectFile" type="com.hbhb.cw.budget.web.vo.BudgetProjectAgileInfoVO">
        <id column="budgetName" property="budgetName"/>
        <id column="projectNum" property="projectNum"/>
        <id column="projectName" property="projectName"/>
        <id column="taxIncludeAmount" property="taxIncludeAmount"/>
        <id column="cost" property="cost"/>
        <id column="vatRate" property="vatRate"/>
        <id column="unitName" property="unitName"/>
        <id column="createBy" property="createBy"/>
        <collection property="files" ofType="com.hbhb.cw.budget.web.vo.BudgetProjectAgileFileVO" column="id">
            <result column="fileId" property="fileId"/>
            <result column="fileName" property="fileName"/>
            <result column="fileSize" property="fileSize"/>
            <result column="filePath" property="filePath"/>
            <result column="required" property="required"/>
            <result column="author" property="author"/>
            <result column="createTime" property="createTime"/>
        </collection>
  </resultMap>
 <select id="selectAgileInfoById" parameterType="long" resultMap="projectFile">
   select
   bpa.id                 as id,
   bpa.project_num        as projectNum,
   bpa.project_name       as projectName,
   u.unit_name            as unitName,
   b.project_item         as budgetName,
   bpa.cost               as cost,
   bpa.vat_rate           as vatRate,
   bpa.tax_include_amount as taxIncludeAmount,
   bpa.create_by          as createBy,
   bpaf.author          as author,
   sf.id                  as fileId,
   sf.file_name           as fileName,
   sf.file_size           as fileSize,
   sf.file_path           as filePath,
   bpaf.required          as required,
   bpaf.create_time       as createTime
   from budget_project_agile bpa
   left join budget b on bpa.budget_id = b.id
   left join unit u on bpa.unit_id = u.id
   left join budget_project_agile_file bpaf on bpa.id = bpaf.project_agile_id
   left join sys_file sf on bpaf.file_id = sf.id
   <where>
     <if test="id != null">
       and bpa.id = #{id}
     </if>
   </where>
 </select>

  <update id="updateDeleteById" parameterType="long">
    update budget_project_agile set delete_flag = 0 where id=#{id}
  </update>

    <select id="selectProgressByBudget" parameterType="map"
            resultType="com.hbhb.cw.budget.web.vo.BudgetProjectAmountVO">
    select t1.projectItemName as projectItemName,
    t2.amount          as amount,
    t2.id              as id,
    t2.projectName     as projectName,
    t2.projectNum      as projectNum,
    t2.creatBy         as creatBy,
    t2.createTime      as createTime,
    u.unit_name        as unitName
    from (
    select b.id                                      as budgetId,
    bi.item_name                              as budgetItemName,
    concat(b.budget_num, '_', b.project_item) as projectItemName,
    bd.balance                                as budgetBalance
    from budget b
    left join budget_data bd on b.id = bd.budget_id
    left join budget_item bi on bi.id = b.budget_item_id
    where bd.unit_id = #{unitId}
    and b.id = #{budgetId}
    order by b.id
    ) t1

    left join
    (
    select bpa.budget_id    as budgetId,
    bpa.cost         as amount,
    bpa.id           as id,
    bpa.project_name as projectName,
    bpa.project_num  as projectNum,
    bpa.create_by    as creatBy,
    bpa.create_time  as createTime
    from (select distinct bb.unit_id       as bbId,
    bb.under_unit_id as unId,
    bb.budget_id     as bdId
    from budget_belong bb
    where bb.budget_id = #{budgetId}
    and bb.under_unit_id = #{unitId}
    ) s1
    left join budget_project_agile bpa on s1.bdId = bpa.budget_id
    where bpa.unit_id in (s1.bbId)
    and bpa.delete_flag = 1
    and bpa.create_time like concat (#{year},'%')
    ) t2
    on t1.budgetId = t2.budgetId
    left join unit u on u.id = #{unitId}
    group by t2.id
  </select>

    <select id="selectProgressByState" parameterType="map" resultType="com.hbhb.cw.budget.web.vo.BudgetProgressResVO">
        select t1.*,
        t1.budgetId as lineNumber,
        ifnull(sum(t2.amount), 0) as amount,
        u.unit_name as unitName
        from (
        select b.id as budgetId,
        bi.item_name as budgetItemName,
        concat(b.project_item) as projectItemName,
        bd.balance as budgetBalance,
        b.remark as remark
    from budget b
    left join budget_data bd on b.id = bd.budget_id
    left join budget_item bi on bi.id = b.budget_item_id
    where bd.unit_id = #{unitId}
    and b.id = #{budgetId}
    <if test="projectItem != null">
      and concat(b.budget_num, '_',b.project_item) like concat ('%',#{projectItem},'%')
    </if>
    order by b.id
    ) t1
    left join
    (
    select distinct bpa.budget_id as budgetId,
    bpa.cost      as amount,
    bpa.id        as id
    from (
    select distinct bb.unit_id as bbId, bb.under_unit_id as unId, bb.budget_id as bdId, bb.id as id
    from budget_belong bb
    where bb.budget_id = #{budgetId}
    and bb.under_unit_id = #{unitId}
    ) s1
    left join budget_project_agile bpa on s1.bdId = bpa.budget_id
    where bpa.unit_id in (s1.bbId)
    and bpa.delete_flag = 1
    and bpa.create_time like concat(#{year}, '%')
    ) t2
    on t1.budgetId = t2.budgetId
    left join unit u on u.id = #{unitId}
    group by t1.budgetId
  </select>

  <select id="selectInfoByNum" parameterType="string" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from budget_project_agile
    where project_num = #{projectNum}
    and delete_flag = 1
  </select>

</mapper>