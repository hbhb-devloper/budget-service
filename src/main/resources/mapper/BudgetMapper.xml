<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hbhb.cw.budget.mapper.BudgetMapper">
    <resultMap id="BaseResultMap" type="com.hbhb.cw.budget.model.Budget">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="budget_item_id" jdbcType="BIGINT" property="budgetItemId"/>
        <result column="project_item" jdbcType="VARCHAR" property="projectItem"/>
        <result column="budget_num" jdbcType="VARCHAR" property="budgetNum"/>
        <result column="balance" jdbcType="DECIMAL" property="balance"/>
        <result column="last_year_balance" jdbcType="DECIMAL" property="lastYearBalance"/>
        <result column="last_year_finished_balance" jdbcType="DECIMAL" property="lastYearFinishedBalance"/>
        <result column="threshold" jdbcType="DECIMAL" property="threshold"/>
        <result column="import_date" jdbcType="VARCHAR" property="importDate"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="create_by" jdbcType="VARCHAR" property="createBy"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="update_by" jdbcType="VARCHAR" property="updateBy"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, budget_item_id, project_item, budget_num, balance, last_year_balance,last_year_finished_balance,
    threshold, import_date, remark, create_time, create_by, update_time, update_by
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from budget
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from budget
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.hbhb.cw.budget.model.Budget">
    insert into budget (id, budget_item_id,
      project_item, budget_num, balance,
      last_year_balance,last_year_finished_balance, threshold, import_date,
      remark, create_time, create_by,
      update_time, update_by)
    values (#{id,jdbcType=BIGINT}, #{budgetItemId,jdbcType=BIGINT},
      #{projectItem,jdbcType=VARCHAR}, #{budgetNum,jdbcType=VARCHAR}, #{balance,jdbcType=DECIMAL},
      #{lastYearBalance,jdbcType=DECIMAL}, #{lastYearFinishedBalance,jdbcType=DECIMAL},
      #{threshold,jdbcType=DECIMAL}, #{importDate,jdbcType=VARCHAR},
      #{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR},
      #{updateTime,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.hbhb.cw.budget.model.Budget">
        insert into budget
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="budgetItemId != null">
                budget_item_id,
            </if>
            <if test="projectItem != null">
                project_item,
            </if>
            <if test="budgetNum != null">
                budget_num,
            </if>
            <if test="balance != null">
                balance,
            </if>
            <if test="lastYearBalance != null">
                last_year_balance,
            </if>
            <if test="lastYearFinishedBalance != null">
              last_year_finished_balance,
            </if>
            <if test="threshold != null">
                threshold,
            </if>
            <if test="importDate != null">
                import_date,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="createBy != null">
                create_by,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="updateBy != null">
                update_by,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="budgetItemId != null">
                #{budgetItemId,jdbcType=BIGINT},
            </if>
            <if test="projectItem != null">
                #{projectItem,jdbcType=VARCHAR},
            </if>
            <if test="budgetNum != null">
                #{budgetNum,jdbcType=VARCHAR},
            </if>
            <if test="balance != null">
                #{balance,jdbcType=DECIMAL},
            </if>
            <if test="lastYearBalance != null">
                #{lastYearBalance,jdbcType=DECIMAL},
            </if>
            <if test="lastYearFinishedBalance != null">
               #{lastYearFinishedBalance,jdbcType=DECIMAL},
            </if>
            <if test="threshold != null">
                #{threshold,jdbcType=DECIMAL},
            </if>
            <if test="importDate != null">
                #{importDate,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createBy != null">
                #{createBy,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateBy != null">
                #{updateBy,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.hbhb.cw.budget.model.Budget">
        update budget
        <set>
            <if test="budgetItemId != null">
                budget_item_id = #{budgetItemId,jdbcType=BIGINT},
            </if>
            <if test="projectItem != null">
                project_item = #{projectItem,jdbcType=VARCHAR},
            </if>
            <if test="budgetNum != null">
                budget_num = #{budgetNum,jdbcType=VARCHAR},
            </if>
            <if test="balance != null">
                balance = #{balance,jdbcType=DECIMAL},
            </if>
            <if test="lastYearBalance != null">
                last_year_balance = #{lastYearBalance,jdbcType=DECIMAL},
            </if>
            <if test="lastYearFinishedBalance != null">
              last_year_finished_balance = #{lastYearFinishedBalance,jdbcType=DECIMAL},
           </if>
            <if test="threshold != null">
                threshold = #{threshold,jdbcType=DECIMAL},
            </if>
            <if test="importDate != null">
                import_date = #{importDate,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createBy != null">
                create_by = #{createBy,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.hbhb.cw.budget.model.Budget">
    update budget
    set budget_item_id = #{budgetItemId,jdbcType=BIGINT},
      project_item = #{projectItem,jdbcType=VARCHAR},
      budget_num = #{budgetNum,jdbcType=VARCHAR},
      balance = #{balance,jdbcType=DECIMAL},
      last_year_balance = #{lastYearBalance,jdbcType=DECIMAL},
      last_year_finished_balance = #{lastYearFinishedBalance,jdbcType=DECIMAL},
      threshold = #{threshold,jdbcType=DECIMAL},
      import_date = #{importDate,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>


    <insert id="insertBatch" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        insert ignore into budget (
        budget_item_id,
        project_item,
        budget_num,
        balance,
        last_year_balance,
        threshold,
        import_date) values
        <foreach item="item" index="index" collection="list" separator=",">
            (#{item.budgetItemId},
            #{item.projectItem},
            #{item.budgetNum},
            #{item.balance},
            #{item.lastYearBalance},
            #{item.threshold},
            #{item.importDate})
        </foreach>
    </insert>

    <update id="updateBatch" parameterType="list">
        update budget
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="project_item=case" suffix="end,">
                <foreach collection="list" item="i" index="index">
                    <if test="i.projectItem!=null">
                        when id=#{i.id} then #{i.projectItem}
                    </if>
                </foreach>
            </trim>
            <trim prefix="budget_item_id=case" suffix="end,">
              <foreach collection="list" item="i" index="index">
                <if test="i.budgetItemId!=null">
                 when id=#{i.id} then #{i.budgetItemId}
               </if>
             </foreach>
           </trim>
            <trim prefix="balance=case" suffix="end,">
                <foreach collection="list" item="i" index="index">
                    <if test="i.balance!=null">
                        when id=#{i.id} then #{i.balance}
                    </if>
                </foreach>
            </trim>
            <trim prefix="import_date=case" suffix="end,">
                <foreach collection="list" item="i" index="index">
                    <if test="i.importDate!=null">
                        when id=#{i.id} then #{i.importDate}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_time=case" suffix="end,">
                <foreach collection="list" item="i" index="index">
                    <if test="i.updateTime!=null">
                        when id=#{i.id} then #{i.updateTime}
                    </if>
                </foreach>
            </trim>
        </trim>
        where
        <foreach collection="list" separator="or" item="i" index="index">
            id=#{i.id}
        </foreach>
    </update>

    <resultMap id="BudgetResult" type="com.hbhb.cw.budget.web.vo.BudgetVO" autoMapping="true">
        <result property="id" column="id"/>
        <collection property="children" resultMap="SubBudgetResult" columnPrefix="sub_"/>
    </resultMap>
    <resultMap id="SubBudgetResult" type="com.hbhb.cw.budget.web.vo.BudgetVO" autoMapping="true">
        <result property="id" column="id"/>
    </resultMap>
    <select id="selectTreeListByCond" parameterType="map" resultMap="BudgetResult">
        select t1.*,
        t2.*
        from (select     bi.id               as id,
        bi.item_name        as itemName,
        bi.update_time      as updateTime,
        b.id                as sub_id,
        concat(b.budget_num, '_', b.project_item)      as sub_itemName,
        ifnull(sum(bd.balance), 0)           as sub_balance,
        b.threshold         as sub_threshold,
        b.budget_num        as sub_budgetNum,
        b.remark            as sub_remark
        from budget_item bi
        left join budget b on bi.id = b.budget_item_id
        <if test="cond.importDate != null and cond.importDate != ''">
            and b.import_date = #{cond.importDate}
        </if>
        left join budget_data bd on b.id = bd.budget_id
        where unit_id in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        <if test="cond.projectItem != null and cond.projectItem != ''">
            and concat(b.budget_num, '_', b.project_item,bi.item_name) like concat ('%', #{cond.projectItem}, '%')
        </if>
        group by b.id, bi.id
        order by b.id,bi.id) t1 left join (
        select ifnull(sum(bd.balance), 0)           as sub_lastYearBalance,
        b.budget_num         as sub_budgetNum
        from budget_data bd
        left join budget b on b.id = bd.budget_id
        left join budget_item bi on bi.id = b.budget_item_id
        where unit_id in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        <if test="cond.lastYear != null and cond.lastYear != ''">
             and b.import_date = #{cond.lastYear}
        </if>
        group by b.id, bi.id) t2 on t1.sub_budgetNum = t2.sub_budgetNum
        group by t1.sub_id,t1.id;
    </select>


    <select id="selectTreeByCond" parameterType="map" resultMap="BudgetResult">
        select t1.*,
        t2.*
        from (select     bi.id               as id,
        bi.item_name        as itemName,
        bi.update_time      as updateTime,
        b.id                as sub_id,
        concat(b.budget_num, '_', b.project_item)      as sub_itemName,
        ifnull(sum(bd.balance), 0)           as sub_balance,
        b.threshold         as sub_threshold,
        b.budget_num        as sub_budgetNum,
        b.remark            as sub_remark
        from budget_item bi
        left join budget b on bi.id = b.budget_item_id
        <if test="importDate != null and importDate != ''">
            and b.import_date = #{importDate}
        </if>
        left join budget_data bd on b.id = bd.budget_id
        <where>
            <if test="projectItem != null and projectItem != ''">
                and concat(b.budget_num, '_', b.project_item,bi.item_name) like concat ('%', #{projectItem}, '%')
            </if>
        </where>
        group by b.id,bi.id
        order by b.id,bi.id) t1 left join (
        select      bd.balance           as sub_lastYearBalance,
        b.budget_num         as sub_budgetNum
        from budget_data bd
        left join budget b on b.id = bd.budget_id
        left join budget_item bi on bi.id = b.budget_item_id
        <where>
            <if test="lastYear != null and lastYear != ''">
                and b.import_date = #{lastYear}
            </if>
        </where>
        ) t2 on t1.sub_budgetNum = t2.sub_budgetNum
        group by t1.sub_id,t1.id;
    </select>

  <update id="upBudgetByBudgetId" parameterType="map">
    update budget b
    set b.balance = #{balance}
    where b.id = #{budgetId}
  </update>

  <select id="selectBalanceByDate" parameterType="map" resultType="decimal">
    select b.balance
    from budget_item bi
    left join budget b on bi.id = b.budget_item_id
    where bi.create_time like concat (#{date},'%')
    and b.budget_num = #{budgetNum}
  </select>

    <select id="selectIdByDate" parameterType="map" resultType="long">
        select b.id
        from budget_item bi
        left join budget b on bi.id = b.budget_item_id
        where b.import_date = #{date}
        and b.budget_num = #{budgetNum}
    </select>

    <select id="selectByBudgetId" parameterType="long" resultType="java.lang.String">
    select budget_num from budget where id =#{budgetId}
  </select>

  <select id="selectAllByYear" parameterType="string" resultMap="BaseResultMap">
    select
     <include refid="Base_Column_List"/>
      from budget
    where import_date = #{year}
  </select>

  <select id="selectBudgetByItemId" parameterType="long" resultType="int">
    select count(1)
    from budget
    where budget_item_id = #{itemId}
  </select>

    <select id="selectThreshold" parameterType="long" resultType="decimal">
        select threshold from budget where id = #{id}
    </select>

    <select id="selectIdByNum" parameterType="map" resultType="long">
        select id from budget where budget_num = #{budgetNum} and import_date = #{importDate}
    </select>

    <select id="selectAll"  resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from budget
    </select>
</mapper>